1、maven创建一个工程
	mvn archetype:create -DgroupId=com.jizg -DartifactId=testMaven
使用maven3及其以上版本时，使用命令generate替换掉create
	mvn archetype:generate -DgroupId=com.lingban -DartifactId=testMaven

2、maven编译clojure
    在pom文件中添加下列内容
    <plugin>
        <groupId>com.theoryinpractise</groupId>
        <artifactId>clojure-maven-plugin</artifactId>
        <version>1.8.1</version>
        <configuration>
          <sourceDirectories>
            <sourceDirectory>src/clj</sourceDirectory>
          </sourceDirectories>
          <testSourceDirectories>
            <testSourceDirectory>test</testSourceDirectory>
          </testSourceDirectories>
        </configuration>
        <executions>
          <execution>
            <id>compile</id>
            <phase>compile</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
          <execution>
            <id>test</id>
            <phase>test</phase>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>
        </executions>

3、maven 安装jar包到本地仓库
    mvn org.apache.maven.plugins:maven-install-plugin:2.5.2:install-file -Dfile=jar包路径
      </plugin>

3、mavan安装本地jar包
 mvn install:install-file -Dfile=jar包的位置 -DgroupId=上面的groupId -DartifactId=上面的artifactId -Dversion=上面的version -Dpackaging=jar

4、sbt引用本地jar包
  sbt 会搜索你的本地 Maven 仓库如果你将它添加为一个仓库：

resolvers += "Local Maven Repository" at "file://"+Path.userHome.absolutePath+"/.m2/repository" 
 如maven库位置为/homw/scc/则resolvers += "Local Maven Repository" at "file:///home/scc/.m2/repository"
为了方便期间，可以写作
resolvers += Resolver.mavenLocal 

5、maven打的jar包缺少依赖的lib
    如果直接maven package 打包无法将依赖的jar包包含进目标包里面，则可以使用maven的插件maven-shade-plugin来打包
    <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>2.1.2</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>